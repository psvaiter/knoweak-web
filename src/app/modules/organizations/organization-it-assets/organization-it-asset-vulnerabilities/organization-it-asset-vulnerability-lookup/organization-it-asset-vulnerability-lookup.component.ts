import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { finalize } from 'rxjs/operators';
import * as _ from 'lodash';

import { Constants } from '../../../../../shared/constants';
import { OrganizationSecurityThreatService } from '../../../../../services/api/organization/organization-security-threat.service';
import { OrganizationItAssetVulnerabilityService } from '../../../../../services/api/organization/organization-it-asset-vulnerability.service';
import { Organization, OrganizationItAsset } from '../../../organization';

@Component({
  selector: 'app-organization-it-asset-vulnerability-lookup',
  templateUrl: './organization-it-asset-vulnerability-lookup.component.html',
  styleUrls: ['./organization-it-asset-vulnerability-lookup.component.scss']
})
export class OrganizationItAssetVulnerabilityLookupComponent implements OnInit {

  @Input() organization: Organization;
  @Input() itAsset: OrganizationItAsset;
  @Input() vulnerability: any;
  @Output() added = new EventEmitter();

  loadingSecurityThreats: boolean;
  securityThreats: any[];
  ratingLevels = Constants.RATING_LEVELS;

  selectedSecurityThreatId: number;
  selectedVulnerabilityLevelId: number;
  editMode: boolean;

  constructor(
    private organizationSecurityThreatService: OrganizationSecurityThreatService,
    private organizationItAssetVulnerabilityService: OrganizationItAssetVulnerabilityService
  ) { 

  }

  ngOnInit() {
    this.loadSecurityThreats();
    
    if (this.vulnerability) {
      this.editMode = true;
      this.selectedSecurityThreatId = this.vulnerability.securityThreat.id;

      if (this.vulnerability.level) {
        this.selectedVulnerabilityLevelId = this.vulnerability.level.id;
      }
    }
  }

  confirm() {
    if (!this.editMode) {
      this.addVulnerability();
    }
    else {
      this.patchVulnerability();
    }
  }

  private loadSecurityThreats() {
    this.loadingSecurityThreats = true;
    this.organizationSecurityThreatService.listSecurityThreats(this.organization.id, 1, 100)
      .pipe(finalize(() => this.loadingSecurityThreats = false))
      .subscribe(
        response => {
          let securityThreats = response['data'].map(item => {
            return {
              id: item.securityThreat.id,
              name: item.securityThreat.name
            };
          });

          this.securityThreats = _.orderBy(securityThreats, ['name']);
        }
      );
  }

  private addVulnerability() {
    let request = {
      securityThreatId: this.selectedSecurityThreatId,
      vulnerabilityLevelId: this.selectedVulnerabilityLevelId
    };
    this.organizationItAssetVulnerabilityService
      .addVulnerability(this.organization.id, this.itAsset.instanceId, request)
      .subscribe(
        response => {
          this.added.emit(request);
        },
        err => {
          console.error(err);
        }
      );
  }

  private patchVulnerability() {
    let request = {
      vulnerabilityLevelId: this.selectedVulnerabilityLevelId
    };
    this.organizationItAssetVulnerabilityService
      .patchVulnerability(this.organization.id, this.itAsset.instanceId, this.vulnerability.securityThreat.id, request)
      .subscribe(
        response => {
          this.added.emit(request);
        },
        err => {
          console.error(err);
        }
      );
  }

}
